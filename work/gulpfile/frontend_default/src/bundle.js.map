{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/var/www/html/laravel5/laravel5-template/gulpfile/frontend_default/src/js/App.js",
    "/var/www/html/laravel5/laravel5-template/gulpfile/frontend_default/src/js/Util.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;sBCAiB,WAAW;;;;;;;AAK5B,MAAM,CAAC,MAAM,GAAG,YAAM;AACpB,MAAM,IAAI,GAAG,oBAAK,UAAU,EAAE,CAAC;AAC/B,SAAO,CAAC,GAAG,CAAE,GAAG,GAAG,IAAI,GAAG,6BAA6B,CAAE,CAAC;CAC3D,CAAC;;;;;;;;;;;;;;;;;ICJmB,IAAI;WAAJ,IAAI;0BAAJ,IAAI;;;eAAJ,IAAI;;;;;;;;;;;;;WAWN,oBAAE,IAAI,EAAE,MAAM,EAAG;AAChC,UAAI,GAAO,IAAI,KAAO,SAAS,GAAG,IAAI,IAAI,EAAE,GAAkB,IAAI,AAAI,CAAC;AACvE,YAAM,GAAK,MAAM,KAAK,SAAS,GAAG,yBAAyB,GAAG,MAAM,AAAE,CAAC;;AAEvE,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAE,CAAC;AACvD,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,KAAK,EAAI,CAAE,GAAG,IAAK,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA,CAAE,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC;AAClF,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,KAAK,EAAI,CAAE,GAAG,GAAY,IAAI,CAAC,OAAO,EAAE,CAAA,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC;AAClF,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,KAAK,EAAI,CAAE,GAAG,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAA,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC;AAClF,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,KAAK,EAAI,CAAE,GAAG,GAAS,IAAI,CAAC,UAAU,EAAE,CAAA,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC;AAClF,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,KAAK,EAAI,CAAE,GAAG,GAAS,IAAI,CAAC,UAAU,EAAE,CAAA,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC;;;AAGlF,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAE,CAAC;AACrD,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,CAAE,CAAC;AAChD,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAE,CAAC;AACjD,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,CAAE,CAAC;AACnD,YAAM,GAAG,MAAM,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,CAAE,CAAC;;AAEnD,UAAI,MAAM,CAAC,KAAK,CAAE,IAAI,CAAE,EAAG;AACzB,YAAM,YAAY,GAAG,CAAE,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA,CAAG,KAAK,CAAE,CAAC,CAAC,CAAE,CAAC;AACnE,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,KAAK,CAAE,IAAI,CAAE,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAG;AAChE,gBAAM,GAAG,MAAM,CAAC,OAAO,CAAE,GAAG,EAAE,YAAY,CAAC,SAAS,CAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAE,CAAE,CAAC;SACpE;OACF;;AAED,aAAO,MAAM,CAAC;KACf;;;SArCkB,IAAI;;;qBAAJ,IAAI",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import Util from './Util.js';\n\n/**\n * アプリケーションのエントリー ポイントです。\n */\nwindow.onload = () => {\n  const date = Util.formatDate();\n  console.log( '[' + date + '] Application was launched.' );\n};\n",
    "\n/**\n * ユーテリティ メソッドを提供します。\n */\nexport default class Util {\n  /**\n   * 日時データを指定された書式に基いて文字列化します。\n   *\n   * @param {Date}   date   日時データ。省略時は最新の日時。\n   * @param {String} format 書式指定。省略時は \"YYYY-MM-DD hh:mm:ss.SSS\"。\n   *\n   * @return {String} 文字列。\n   *\n   * @see http://qiita.com/osakanafish/items/c64fe8a34e7221e811d0\n   */\n  static formatDate( date, format ) {\n    date   = ( date   === undefined ? new Date()                : date   );\n    format = ( format === undefined ? 'YYYY-MM-DD hh:mm:ss.SSS' : format );\n\n    format = format.replace( /YYYY/g, date.getFullYear() );\n    format = format.replace( /MM/g,   ( '0' + ( date.getMonth() + 1 ) ).slice( -2 ) );\n    format = format.replace( /DD/g,   ( '0' +          date.getDate() ).slice( -2 ) );\n    format = format.replace( /hh/g,   ( '0' +         date.getHours() ).slice( -2 ) );\n    format = format.replace( /mm/g,   ( '0' +       date.getMinutes() ).slice( -2 ) );\n    format = format.replace( /ss/g,   ( '0' +       date.getSeconds() ).slice( -2 ) );\n\n    // ゼロ詰め置換を経ても残っているなら、そのまま数値化\n    format = format.replace( /M/g, date.getMonth() + 1 );\n    format = format.replace( /D/g, date.getDate() );\n    format = format.replace( /h/g, date.getHours() );\n    format = format.replace( /m/g, date.getMinutes() );\n    format = format.replace( /s/g, date.getSeconds() );\n\n    if( format.match( /S/g ) ) {\n      const milliSeconds = ( '00' + date.getMilliseconds() ).slice( -3 );\n      for( let i = 0, max = format.match( /S/g ).length; i < max; ++i ) {\n        format = format.replace( /S/, milliSeconds.substring( i, i + 1 ) );\n      }\n    }\n\n    return format;\n  }\n}\n"
  ]
}